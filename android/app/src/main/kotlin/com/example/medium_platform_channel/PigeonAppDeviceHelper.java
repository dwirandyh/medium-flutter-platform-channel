// Autogenerated from Pigeon (v7.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.medium_platform_channel;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PigeonAppDeviceHelper {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AppInfo {
    private @NonNull String appID;

    public @NonNull String getAppID() {
      return appID;
    }

    public void setAppID(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"appID\" is null.");
      }
      this.appID = setterArg;
    }

    private @NonNull String appVersion;

    public @NonNull String getAppVersion() {
      return appVersion;
    }

    public void setAppVersion(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"appVersion\" is null.");
      }
      this.appVersion = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AppInfo() {}

    public static final class Builder {

      private @Nullable String appID;

      public @NonNull Builder setAppID(@NonNull String setterArg) {
        this.appID = setterArg;
        return this;
      }

      private @Nullable String appVersion;

      public @NonNull Builder setAppVersion(@NonNull String setterArg) {
        this.appVersion = setterArg;
        return this;
      }

      public @NonNull AppInfo build() {
        AppInfo pigeonReturn = new AppInfo();
        pigeonReturn.setAppID(appID);
        pigeonReturn.setAppVersion(appVersion);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(appID);
      toListResult.add(appVersion);
      return toListResult;
    }

    static @NonNull AppInfo fromList(@NonNull ArrayList<Object> list) {
      AppInfo pigeonResult = new AppInfo();
      Object appID = list.get(0);
      pigeonResult.setAppID((String) appID);
      Object appVersion = list.get(1);
      pigeonResult.setAppVersion((String) appVersion);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DeviceInfo {
    private @NonNull String deviceName;

    public @NonNull String getDeviceName() {
      return deviceName;
    }

    public void setDeviceName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"deviceName\" is null.");
      }
      this.deviceName = setterArg;
    }

    private @NonNull String osVersion;

    public @NonNull String getOsVersion() {
      return osVersion;
    }

    public void setOsVersion(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"osVersion\" is null.");
      }
      this.osVersion = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DeviceInfo() {}

    public static final class Builder {

      private @Nullable String deviceName;

      public @NonNull Builder setDeviceName(@NonNull String setterArg) {
        this.deviceName = setterArg;
        return this;
      }

      private @Nullable String osVersion;

      public @NonNull Builder setOsVersion(@NonNull String setterArg) {
        this.osVersion = setterArg;
        return this;
      }

      public @NonNull DeviceInfo build() {
        DeviceInfo pigeonReturn = new DeviceInfo();
        pigeonReturn.setDeviceName(deviceName);
        pigeonReturn.setOsVersion(osVersion);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(deviceName);
      toListResult.add(osVersion);
      return toListResult;
    }

    static @NonNull DeviceInfo fromList(@NonNull ArrayList<Object> list) {
      DeviceInfo pigeonResult = new DeviceInfo();
      Object deviceName = list.get(0);
      pigeonResult.setDeviceName((String) deviceName);
      Object osVersion = list.get(1);
      pigeonResult.setOsVersion((String) osVersion);
      return pigeonResult;
    }
  }

  private static class AppDeviceHelperCodec extends StandardMessageCodec {
    public static final AppDeviceHelperCodec INSTANCE = new AppDeviceHelperCodec();

    private AppDeviceHelperCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AppInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return DeviceInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AppInfo) {
        stream.write(128);
        writeValue(stream, ((AppInfo) value).toList());
      } else if (value instanceof DeviceInfo) {
        stream.write(129);
        writeValue(stream, ((DeviceInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AppDeviceHelper {

    @NonNull 
    AppInfo getAppInfo();

    @NonNull 
    DeviceInfo getDeviceInfo();

    @NonNull 
    Long getBatteryLevel();

    /** The codec used by AppDeviceHelper. */
    static MessageCodec<Object> getCodec() {
      return AppDeviceHelperCodec.INSTANCE;
    }
    /**Sets up an instance of `AppDeviceHelper` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AppDeviceHelper api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.AppDeviceHelper.getAppInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  AppInfo output = api.getAppInfo();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.AppDeviceHelper.getDeviceInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  DeviceInfo output = api.getDeviceInfo();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.AppDeviceHelper.getBatteryLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.getBatteryLevel();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
